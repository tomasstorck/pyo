#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Visit github.com/tomasstorck/pyo for updates and more information.

import os
import sys
import subprocess
import time
import pickle
import argparse
import configparser

###########

def isExecutable(path):
    return os.path.isfile(path) and os.access(path, os.X_OK)

def buildFiles(pathArray):
    t0 = time.time()
    # Initialise empty database
    filesDB = {}
    print("updating 'files' database...")
    for p in pathArray:
        print(p)
        # Walk recursively through directories and files in pathArray, compile database
        for root, dirs, files in os.walk(p, topdown=True):
            # Filter out the unwanted directories
            for d in dirs[:]:  # dirs[:] to make a copy of dirs
                if any(bl in d for bl in blacklist_dir):
                    dirs.remove(d)
            # Loop through the files in filtered dirs and append if interesting (does not start with ., is not in blacklist, is in whitelist)
            for f in files[:]:
                if (f[0] == '.'):
                    continue
                if any(bl in f for bl in blacklist_file):
                    continue
                if (not any(wl in f for wl in whitelist_file)) and (not os.path.splitext(f)[-1]==""):
                    continue
                filesDB[f] = os.path.join(root, f)

    print("updated 'files' database in " + str(round(time.time() - t0, 3)) + " s")
    return filesDB


def saveFiles(filesDB, DBName='pyoFiles'):
    t0 = time.time()
    # Create directories if they do not exist
    if not os.path.isdir(DBDir):
        os.mkdir(DBDir)
    # Save database
    with open(DBDir + '/' + DBName + '.pkl', 'wb') as fid:  # w = write, b = binary
        print("saved 'files' database in " + str(round(time.time() - t0, 3)) + " s")
        pickle.dump(filesDB, fid,
                    pickle.HIGHEST_PROTOCOL)  # Python 3 will choose whether to use pure Python pickle or cPickle


def loadFiles():
    t0 = time.time()
    filesDB = {}
    try:
        with open(DBDir + '/pyoFiles.pkl', 'rb') as fid:  # r = read, b = binary
            filesDB = pickle.load(fid)
    except IOError as e:
        raise e from FileNotFoundError("Could not find file system database, generate using \'pyo -u\'")
    print("loaded 'files' database in " + str(round(time.time() - t0, 3)) + " s")
    return filesDB


def saveRecent(recentDB):
    t0 = time.time()
    # Create directories if they do not exist
    if not os.path.isdir(DBDir):
        os.mkdir(DBDir)
    # Save database
    with open(DBDir + '/pyoRecent.pkl', 'wb') as fid:  # w = write, b = binary
        pickle.dump(recentDB, fid, pickle.HIGHEST_PROTOCOL)
    print("saved 'recent' database in " + str(round(time.time() - t0, 3)) + " s")


def loadRecent():
    t0 = time.time()
    try:
        with open(DBDir + '/pyoRecent.pkl', 'rb') as fid:  # r = read, b = binary
            recentDB = pickle.load(fid)
    except IOError:
        print("WARNING: Could not find recent database, using empty database")
        return []
    print("loaded 'recent' database in " + str(round(time.time() - t0, 3)) + " s")
    return recentDB


def appendRecentIfNeeded(cmd, recentDB):
    t0 = time.time()
    # See if we should append the chosen key to recent
    append = True
    if cmd == '':
        append = False
    for i in range(len(recentDB)):
        r = recentDB[i]
        if cmd == r:
            recentDB.pop(i)  # we'll add it again in the next step
            break  # there is only one command, so no point continuing

    # Append if needed
    if append:
        Npop = len(recentDB) + 1 - Nrecent
        for i in range(Npop):
            recentDB.pop(0)  # Pop oldest key
        recentDB.append(cmd)
        print("updated 'recent' database in " + str(round(time.time() - t0, 3)) + " s")
        saveRecent(recentDB)
    
    
def builddmenu(filesDB, recentDB=['']):
    t0 = time.time()

    # Build bash echo string
    echoStr = ''
    for k in recentDB[::-1]:
        echoStr += k + '\n'

    keys = list(filesDB.keys())
    keys.sort()
    for k in keys:
        if not k in recentDB:
            echoStr += k + '\n'

    print("built dmenu input in " + str(round(time.time() - t0, 3)) + " s")

    return echoStr


def calldmenu(echoStr):
    # Communicate with dmenu through the shell
    p = subprocess.Popen(['dmenu'] + dmenu_args,  # Concatenate dmenu with its arguments
                         stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = p.communicate(input=echoStr.encode())  # Call subprocess, piping in the bytes version of the menu input
    stderrStr = stderr.strip().decode()
    if stderrStr != '':
        print("WARNING: dmenu returned error, '" + stderrStr + "'")
    cmd = stdout.strip().decode()  # Decode to go from bytes --> str
    # FileNotFoundError("Cannot run dmenu output '" + " ".join([cmd,]) + "'")

    # Work through command returned by dmenu
    if cmd == '':
        print("Stopped without command")
    else:
        # Convert command to an array
        cmdArray = cmd.split(' ')
        cmdArrayProc = []  # copy cmdArray so we can make the changes in there
        for ii in reversed(range(len(cmdArray))):       # ii = right index. Start with longest possible command
            # Find where the key is a filesDB key in the given command
            c = ' '.join(cmdArray[:ii+1])               # +1 because i = [len(), len()-1, ..., 1, 0]. Only with len()+1 we get all of cmdArray
            if c in filesDB:
                if not isExecutable(filesDB[c]):
                    cmdArrayProc.append('xdg-open')
                cmdArrayProc.append(filesDB[c])
                # Now add the remaining elements of cmdArray as arguments, then exit for loop
                cmdArrayProc.extend(cmdArray[ii+1:])
                break
        else:                                           # No entry found for cmd in filesDB. Execute anyway, might be a terminal command
            cmdArrayProc = cmdArray
        # Now execute the processed command
        subprocess.Popen(cmdArrayProc, stdin=None, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    return cmd
    
def resetConfig():
    if not os.path.isdir(configDir):
        os.mkdir(configDir)
    with open(configPath,'w') as file:
        file.write("""; Note that arguments requires one argument per line, so as to allow whitespaces in arguments
\n[dmenu]
arguments = -b              ; Show dmenu at the bottom of the screen
            -i              ; Ignore case to match files/programs
            -p              ; Text to show as prompt
            command:        
            -nb             ; Non-selection items, background colour
            #111111         
            -nf             ; Non-selection items, foreground colour
            #aaaaaa         
            -sb             ; Selection, background colour
            #aa5533         
            -sf             ; Selection, foreground colour
            #cccccc         
            -l              ; Length of list to show, in number of lines
            10              
            -fn
            -monotype-courier new-medium-r-normal-*-12-*-*-*-*-*-*-*
                            ; Font to use, use xfontsel to build this string
\n[blacklist]
dir = . git cache           ; Directory names containing anything from this list will not be searched through for files database
file = ~ .h .c .cpp         ; File names containing anything from this list OR start with . will not be searched through for filesDB
\n[whitelist]
file =  .doc .docx .ppt .pptx  .xls .xlsx                       ; Microsoft Office documents
        .ods .odt                                               ; LibreOffice/OpenOffice/etc. documents
        .blender .csv .m .pdf .tex .txt                         ; Other documents 
        .desktop                                                ; Launchers
        .log                                                    ; Log files
        .conf .cfg                                              ; Configuration files
        .sh .py                                                 ; Scripts
        .avi .mp3 .mp4 .mpg .wma .wmv                           ; Audio and video
        .eps .jpg .jpeg .png .psd .svg .tif .tiff               ; Images 
        .7zip .gz .tar .rar .zip                                ; Archives
\n[other]
Nrecent = 50                ; Number of recent items to remember""")


def parseConfig():
    # Parse configuration file
    configParser = configparser.ConfigParser(comment_prefixes=(';',), inline_comment_prefixes=(';',))           # Allow comments using ';'. # is reserved for colours    
    configReadReturn = configParser.read(configPath)    
    if configReadReturn == []:
        return None
    else:
        return configParser

###########

# Load a few commonly used variables
homeDir = os.path.expanduser("~")
DBDir = homeDir + "/.cache/pyo"
defaultPathArray = [homeDir, "/usr/bin"]
configDir = homeDir + "/.config/pyo"
configPath = configDir + "/settings" 

t0 = time.time()
# Parse configuration file
config = parseConfig()
if config == None:
    print("configuration file does not exist, writing defaults to " + configPath)
    resetConfig()
    config = parseConfig()
try:
    dmenu_args      = config['dmenu']['arguments'].splitlines()
    blacklist_dir   = config['blacklist']['dir'].split()
    blacklist_file  = config['blacklist']['file'].split()
    whitelist_file  = config['whitelist']['file'].split()
    Nrecent         = int(config['other']['Nrecent'])
    # TODO: throw warning when unused settings are defined
    print("read configuration file in " + str(round(time.time() - t0, 3)) + " s")
except KeyError as e:
    raise KeyError("Missing key or section '" + " ".join(e.args) + "' in configuration file, consider using --reset-configuration")

# Analyse input arguments
parser = argparse.ArgumentParser(description="Search for and open a file or program using dmenu", 
                                 epilog="See github.com/tomasstorck/pyo for details.")
parser.add_argument('-o', 
                    help = "start pyo and commence searching (default)",
                    action = 'store_true')
parser.add_argument('-u', metavar='PATH',
                    help = "update 'files' database to index specified paths (" + " ".join(defaultPathArray) + " unless specified)",
                    nargs = '*')
parser.add_argument('--clean-recent',
                    help = "clean entries not existing in 'files' database from 'recent' database",
                    action = 'store_true')
parser.add_argument('--reset-recent',
                    help = "create and save new, empty 'recent' database",
                    action = 'store_true')
parser.add_argument('--reset-configuration',
                    help = "create and save new, default configuration file",
                    action = 'store_true')
parserArgs = parser.parse_args()

# However, we walk through sys.argv to maintain the order instead of using the parser
for arg in sys.argv:
    if len(sys.argv) == 1 or any([arg in s for s in ['-o']]):
        # Load specified databases
        filesDB = loadFiles()
        # Continue creating dmenu and appending to recent
        recentDB = loadRecent()
        echoStr = builddmenu(filesDB, recentDB)
        cmd = calldmenu(echoStr)
        if not cmd == "":
            print("running '" + cmd + "'")
        appendRecentIfNeeded(cmd, recentDB)
    # build and save file system database
    elif any([arg in s for s in ['-u']]):
        pathArray = parserArgs.u
        if pathArray == []:                         # Use default pathArray if otherwise empty
            pathArray = defaultPathArray
        filesDB = buildFiles(pathArray)
        saveFiles(filesDB)
    # clean unknown command entries in the 'recent' database
    elif any([arg in s for s in ['--clean-recent']]):
        filesDB = loadFiles()        
        recentDB = loadRecent()
        t0 = time.time()
        NCleaned = 0        
        for r in recentDB[-1:0:-1]:                 # Loop in reverse order to prevent concurrent modifications
            if not r.split()[0] in filesDB and not r in filesDB:    # Not the first word (command) in filesDB and entry is not a file
                recentDB.remove(r)
                NCleaned += 1
        print(str(NCleaned) + " entries removed from 'recent' database")
        saveRecent(recentDB)
        print("'recent' database cleaned in " + str(round(time.time() - t0, 3)) + " s")
    # define clean 'recent' database and save
    elif any([arg in s for s in ['--reset-recent']]):
        # define empty, dummy database
        print("creating dummy recent database")
        recentDB = []
        saveRecent(recentDB)
    # reset configuration file to defaults
    elif any([arg in s for s in ['--reset-configuration']]):
        # define default database
        print("writing default configuration file to " + configPath)
        resetConfig()
